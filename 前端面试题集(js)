描述cookies,sessionStorage和localStorage的区别：
    cookie：网站为了标识用户身份存储在用户本地终端上的数据，通常经过加密
            cookie数据即使不需要也始终在同源的http请求中携带（在浏览器和服务器间来回传递）
            cookie数据大小不能超过4K
            设置cookie过期时间之前即使窗口或浏览器关闭也一直有效
    sessionStorage和localStorage：
            不会自动把数据发给服务器，仅在本地保存
            存储大小可以达到5M或更大（有存储限制）
            有更多易用接口
    sessionStorage：数据在当前浏览器窗口关闭后自动浏览
    localStorage：存储持久数据，浏览器关闭后数据不会丢失，除非主动删除数据
    
XSS的原理，及防范方法：
    XSS：XSS攻击是指攻击者在Web页面中插入恶意html标签或javascript代码，骗取用户点击后，窃取cookie中的用户私密信息；
         或攻击者在论坛中加一个恶意表单，当用户提交表单时，把信息传递到攻击者的服务器中，而不是用户原本以为的信任站点。
    XSS防范方法：
        a）从代码中对用户输入的地方和变量进行长度检查，对“<”、“>”、“;”、“'”等字符做过滤；
          任何内容写到页面之年都必须加以encode，避免不小心把html tag弄出来。这一层面做好可以堵住超过一半的XSS攻击
        b）避免直接在cookie中泄露用户隐私，如：email、密码等
          通过使用cookie和系统IP绑定来降低cookie泄露后的危险
          若网站不需要在浏览器端对cookie进行操作，可以在Set-Cookie末尾加上HttpOnly来防止javascript代码直接获取cookie
          尽量采用POST而非GET提交表单
          
XSS和CSRF的区别：
    XSS：获取信息，不需要提前知道其他用户页面的代码和数据包
    CSRF：代替用户完成指定的动作，需要知道其他用户页面的代码和数据包
          完成一次CSRF攻击，受害者必须依次完成两个步骤：
              登录受信任网站A，并在本地生成cookie
              在不退出A的情况下，访问危险网站B
              
         CSRF防御：在客户端页面增加伪随机数；通过验证码的方法（Web Worker 和 webSocket【web应用程序的传输协议，HTML5协议，连接持久，
                  提供了双向的按序到达的数据流；服务器的更新可以被及时推送给客户端，不需要客户端以一定的时间间隔去轮询】）
                  
  
事件委托：
    让利用事件冒泡的原理；自己所触发的事件由它的父元素代替
    
javascript事件委托方法Event delegate：
    给节点添加事件时，借助冒泡机制，将这些事件委托给父节点进行处理；达到简化代码，消除循环引用导致的内存泄露问题。

对网站的文件和资源进行优化?期待的解决方案包括：
    文件合并
    文件最小化/文件压缩
    
    使用CDN托管
    缓存的使用

for 和 foreach 的区别：
    for：循环靠下标定位；在固定长度或长度不需要计算时使用for
    foreach：在不确定长度或长度计算有损耗时使用foreach

一次http请求中的缓存内容：
    1）普通内存缓存：功能很强（缓存数据库数据）、平时使用最多的缓存
    2）浏览器端文件缓存：常用于html、css、js等的缓存，以减少请求次数；http协议中时间未过期的情况下，直接使用本地文件，不请求服务器数据
    3）HTTP缓存304：不减少请求数量，减少响应体积；http协议中若服务器文件未发生变化，则只返回304不返回用户请求数据
    4）变现层&DOM缓存：在客户端和服务器端缓存html片段
    5）服务器端文件类型缓存：动态页面静态化为html页面；代理服务器CDN等；某些不常更新的数据静态化为文件；节省服务器资源（如：CPU）
    6）数据库缓存：大部分数据库都会把数据加载到内存来提高性能
    
web前端SEO的内容：
    1）减少http请求：资源合并压缩、css sprites
    2) css放在head标签中
    3）避免重复资源请求
    4）html标签优化
 
 get和post请求：
    get方式：将数据作为URL的一部分发送给服务器。请求数据可以被缓存，能够保留在浏览器历史记录中，能作为书签被收藏，安全性比较低，有长度限制（不超过8192个字符）
    post方式：将数据隐藏在HTTP数据流中进行传输。请求数据不会被缓存，也不会在浏览器的历史记录中保存，更不会作为书签被收藏，请求数据不会出现在地址栏，安全性比get方式要高，对数据长度没有限制

闭包：


闭合浮动


拖拽的实现


数组去重（小程序实现）


去掉前后端空格（小程序实现）


使用过的前端框架及其优缺点
    

    
    
