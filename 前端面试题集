描述cookies,sessionStorage和localStorage的区别：
    cookie：网站为了标识用户身份存储在用户本地终端上的数据，通常经过加密
            cookie数据即使不需要也始终在同源的http请求中携带（在浏览器和服务器间来回传递）
            cookie数据大小不能超过4K
            设置cookie过期时间之前即使窗口或浏览器关闭也一直有效
    sessionStorage和localStorage：
            不会自动把数据发给服务器，仅在本地保存
            存储大小可以达到5M或更大（有存储限制）
            有更多易用接口
    sessionStorage：数据在当前浏览器窗口关闭后自动浏览
    localStorage：存储持久数据，浏览器关闭后数据不会丢失，除非主动删除数据
    
XSS的原理，及防范方法：
    XSS：XSS攻击是指攻击者在Web页面中插入恶意html标签或javascript代码，骗取用户点击后，窃取cookie中的用户私密信息；
         或攻击者在论坛中加一个恶意表单，当用户提交表单时，把信息传递到攻击者的服务器中，而不是用户原本以为的信任站点。
    XSS防范方法：
        a）从代码中对用户输入的地方和变量进行长度检查，对“<”、“>”、“;”、“'”等字符做过滤；
          任何内容写到页面之年都必须加以encode，避免不小心把html tag弄出来。这一层面做好可以堵住超过一半的XSS攻击
        b）避免直接在cookie中泄露用户隐私，如：email、密码等
          通过使用cookie和系统IP绑定来降低cookie泄露后的危险
          若网站不需要在浏览器端对cookie进行操作，可以在Set-Cookie末尾加上HttpOnly来防止javascript代码直接获取cookie
          尽量采用POST而非GET提交表单
          
XSS和CSRF的区别：
    XSS：获取信息，不需要提前知道其他用户页面的代码和数据包
    CSRF：代替用户完成指定的动作，需要知道其他用户页面的代码和数据包
          完成一次CSRF攻击，受害者必须依次完成两个步骤：
              登录受信任网站A，并在本地生成cookie
              在不退出A的情况下，访问危险网站B
              
         CSRF防御：在客户端页面增加伪随机数；通过验证码的方法（Web Worker 和 webSocket【web应用程序的传输协议，HTML5协议，连接持久，
                  提供了双向的按序到达的数据流；服务器的更新可以被及时推送给客户端，不需要客户端以一定的时间间隔去轮询】）
                  
事件委托：
    让利用事件冒泡的原理；自己所触发的事件由它的父元素代替
    
px、em、rem的区别：
    px和em都是长度单位，
    px的值是固定的，指定是多少就是多少，计算比较容易
    em得值不是固定的，会继承父级元素的字体大小
  浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em
  
javascript事件委托方法Event delegate：
  

对网站的文件和资源进行优化?期待的解决方案包括：
    文件合并
    文件最小化/文件压缩
    
    使用CDN托管
    缓存的使用

for 和 foreach 的区别：


